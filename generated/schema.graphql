### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  categoriesVisible(after: AccountCategoryWhereUniqueInput, before: AccountCategoryWhereUniqueInput, first: Int, last: Int): [AccountCategory!]!
  client: Client
  clientsVisible(after: AccountClientWhereUniqueInput, before: AccountClientWhereUniqueInput, first: Int, last: Int): [AccountClient!]!
  id: Int!
  name: String!
  owner: User!
  permissions(after: PermissionWhereUniqueInput, before: PermissionWhereUniqueInput, first: Int, last: Int): [Permission!]!
}

type AccountCategory {
  account: Account!
  accountId: Int!
  category: Category!
  categoryId: Int!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
}

input AccountCategoryAcc_catCompoundUniqueInput {
  accountId: Int!
  categoryId: Int!
}

input AccountCategoryCreateManyAccountInput {
  categoryId: Int!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input AccountCategoryCreateManyAccountInputEnvelope {
  data: [AccountCategoryCreateManyAccountInput!]
  skipDuplicates: Boolean
}

input AccountCategoryCreateManyCategoryInput {
  accountId: Int!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input AccountCategoryCreateManyCategoryInputEnvelope {
  data: [AccountCategoryCreateManyCategoryInput!]
  skipDuplicates: Boolean
}

input AccountCategoryCreateNestedManyWithoutAccountInput {
  connect: [AccountCategoryWhereUniqueInput!]
  connectOrCreate: [AccountCategoryCreateOrConnectWithoutAccountInput!]
  create: [AccountCategoryCreateWithoutAccountInput!]
  createMany: AccountCategoryCreateManyAccountInputEnvelope
}

input AccountCategoryCreateNestedManyWithoutCategoryInput {
  connect: [AccountCategoryWhereUniqueInput!]
  connectOrCreate: [AccountCategoryCreateOrConnectWithoutCategoryInput!]
  create: [AccountCategoryCreateWithoutCategoryInput!]
  createMany: AccountCategoryCreateManyCategoryInputEnvelope
}

input AccountCategoryCreateOrConnectWithoutAccountInput {
  create: AccountCategoryCreateWithoutAccountInput!
  where: AccountCategoryWhereUniqueInput!
}

input AccountCategoryCreateOrConnectWithoutCategoryInput {
  create: AccountCategoryCreateWithoutCategoryInput!
  where: AccountCategoryWhereUniqueInput!
}

input AccountCategoryCreateWithoutAccountInput {
  category: CategoryCreateNestedOneWithoutAccountsVisibleInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input AccountCategoryCreateWithoutCategoryInput {
  account: AccountCreateNestedOneWithoutCategoriesVisibleInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input AccountCategoryListRelationFilter {
  every: AccountCategoryWhereInput
  none: AccountCategoryWhereInput
  some: AccountCategoryWhereInput
}

input AccountCategoryOrderByRelationAggregateInput {
  count: SortOrder!
}

input AccountCategoryScalarWhereInput {
  AND: [AccountCategoryScalarWhereInput!]
  NOT: [AccountCategoryScalarWhereInput!]
  OR: [AccountCategoryScalarWhereInput!]
  accountId: IntFilter
  categoryId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
}

input AccountCategoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountCategoryUpdateManyWithWhereWithoutAccountInput {
  data: AccountCategoryUpdateManyMutationInput!
  where: AccountCategoryScalarWhereInput!
}

input AccountCategoryUpdateManyWithWhereWithoutCategoryInput {
  data: AccountCategoryUpdateManyMutationInput!
  where: AccountCategoryScalarWhereInput!
}

input AccountCategoryUpdateManyWithoutAccountInput {
  connect: [AccountCategoryWhereUniqueInput!]
  connectOrCreate: [AccountCategoryCreateOrConnectWithoutAccountInput!]
  create: [AccountCategoryCreateWithoutAccountInput!]
  createMany: AccountCategoryCreateManyAccountInputEnvelope
  delete: [AccountCategoryWhereUniqueInput!]
  deleteMany: [AccountCategoryScalarWhereInput!]
  disconnect: [AccountCategoryWhereUniqueInput!]
  set: [AccountCategoryWhereUniqueInput!]
  update: [AccountCategoryUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [AccountCategoryUpdateManyWithWhereWithoutAccountInput!]
  upsert: [AccountCategoryUpsertWithWhereUniqueWithoutAccountInput!]
}

input AccountCategoryUpdateManyWithoutCategoryInput {
  connect: [AccountCategoryWhereUniqueInput!]
  connectOrCreate: [AccountCategoryCreateOrConnectWithoutCategoryInput!]
  create: [AccountCategoryCreateWithoutCategoryInput!]
  createMany: AccountCategoryCreateManyCategoryInputEnvelope
  delete: [AccountCategoryWhereUniqueInput!]
  deleteMany: [AccountCategoryScalarWhereInput!]
  disconnect: [AccountCategoryWhereUniqueInput!]
  set: [AccountCategoryWhereUniqueInput!]
  update: [AccountCategoryUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [AccountCategoryUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [AccountCategoryUpsertWithWhereUniqueWithoutCategoryInput!]
}

input AccountCategoryUpdateWithWhereUniqueWithoutAccountInput {
  data: AccountCategoryUpdateWithoutAccountInput!
  where: AccountCategoryWhereUniqueInput!
}

input AccountCategoryUpdateWithWhereUniqueWithoutCategoryInput {
  data: AccountCategoryUpdateWithoutCategoryInput!
  where: AccountCategoryWhereUniqueInput!
}

input AccountCategoryUpdateWithoutAccountInput {
  category: CategoryUpdateOneRequiredWithoutAccountsVisibleInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountCategoryUpdateWithoutCategoryInput {
  account: AccountUpdateOneRequiredWithoutCategoriesVisibleInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountCategoryUpsertWithWhereUniqueWithoutAccountInput {
  create: AccountCategoryCreateWithoutAccountInput!
  update: AccountCategoryUpdateWithoutAccountInput!
  where: AccountCategoryWhereUniqueInput!
}

input AccountCategoryUpsertWithWhereUniqueWithoutCategoryInput {
  create: AccountCategoryCreateWithoutCategoryInput!
  update: AccountCategoryUpdateWithoutCategoryInput!
  where: AccountCategoryWhereUniqueInput!
}

input AccountCategoryWhereInput {
  AND: [AccountCategoryWhereInput!]
  NOT: [AccountCategoryWhereInput!]
  OR: [AccountCategoryWhereInput!]
  account: AccountWhereInput
  accountId: IntFilter
  category: CategoryWhereInput
  categoryId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
}

input AccountCategoryWhereUniqueInput {
  acc_cat: AccountCategoryAcc_catCompoundUniqueInput
  id: Int
}

type AccountClient {
  account: Account!
  accountId: Int!
  client: Client!
  clientId: Int!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
}

input AccountClientAcc_cliCompoundUniqueInput {
  accountId: Int!
  clientId: Int!
}

input AccountClientCreateManyAccountInput {
  clientId: Int!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input AccountClientCreateManyAccountInputEnvelope {
  data: [AccountClientCreateManyAccountInput!]
  skipDuplicates: Boolean
}

input AccountClientCreateManyClientInput {
  accountId: Int!
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input AccountClientCreateManyClientInputEnvelope {
  data: [AccountClientCreateManyClientInput!]
  skipDuplicates: Boolean
}

input AccountClientCreateNestedManyWithoutAccountInput {
  connect: [AccountClientWhereUniqueInput!]
  connectOrCreate: [AccountClientCreateOrConnectWithoutAccountInput!]
  create: [AccountClientCreateWithoutAccountInput!]
  createMany: AccountClientCreateManyAccountInputEnvelope
}

input AccountClientCreateNestedManyWithoutClientInput {
  connect: [AccountClientWhereUniqueInput!]
  connectOrCreate: [AccountClientCreateOrConnectWithoutClientInput!]
  create: [AccountClientCreateWithoutClientInput!]
  createMany: AccountClientCreateManyClientInputEnvelope
}

input AccountClientCreateOrConnectWithoutAccountInput {
  create: AccountClientCreateWithoutAccountInput!
  where: AccountClientWhereUniqueInput!
}

input AccountClientCreateOrConnectWithoutClientInput {
  create: AccountClientCreateWithoutClientInput!
  where: AccountClientWhereUniqueInput!
}

input AccountClientCreateWithoutAccountInput {
  client: ClientCreateNestedOneWithoutAccountsVisibleInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input AccountClientCreateWithoutClientInput {
  account: AccountCreateNestedOneWithoutClientsVisibleInput!
  createdAt: DateTime
  updatedAt: DateTime
}

input AccountClientListRelationFilter {
  every: AccountClientWhereInput
  none: AccountClientWhereInput
  some: AccountClientWhereInput
}

input AccountClientOrderByRelationAggregateInput {
  count: SortOrder!
}

input AccountClientScalarWhereInput {
  AND: [AccountClientScalarWhereInput!]
  NOT: [AccountClientScalarWhereInput!]
  OR: [AccountClientScalarWhereInput!]
  accountId: IntFilter
  clientId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
}

input AccountClientUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountClientUpdateManyWithWhereWithoutAccountInput {
  data: AccountClientUpdateManyMutationInput!
  where: AccountClientScalarWhereInput!
}

input AccountClientUpdateManyWithWhereWithoutClientInput {
  data: AccountClientUpdateManyMutationInput!
  where: AccountClientScalarWhereInput!
}

input AccountClientUpdateManyWithoutAccountInput {
  connect: [AccountClientWhereUniqueInput!]
  connectOrCreate: [AccountClientCreateOrConnectWithoutAccountInput!]
  create: [AccountClientCreateWithoutAccountInput!]
  createMany: AccountClientCreateManyAccountInputEnvelope
  delete: [AccountClientWhereUniqueInput!]
  deleteMany: [AccountClientScalarWhereInput!]
  disconnect: [AccountClientWhereUniqueInput!]
  set: [AccountClientWhereUniqueInput!]
  update: [AccountClientUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [AccountClientUpdateManyWithWhereWithoutAccountInput!]
  upsert: [AccountClientUpsertWithWhereUniqueWithoutAccountInput!]
}

input AccountClientUpdateManyWithoutClientInput {
  connect: [AccountClientWhereUniqueInput!]
  connectOrCreate: [AccountClientCreateOrConnectWithoutClientInput!]
  create: [AccountClientCreateWithoutClientInput!]
  createMany: AccountClientCreateManyClientInputEnvelope
  delete: [AccountClientWhereUniqueInput!]
  deleteMany: [AccountClientScalarWhereInput!]
  disconnect: [AccountClientWhereUniqueInput!]
  set: [AccountClientWhereUniqueInput!]
  update: [AccountClientUpdateWithWhereUniqueWithoutClientInput!]
  updateMany: [AccountClientUpdateManyWithWhereWithoutClientInput!]
  upsert: [AccountClientUpsertWithWhereUniqueWithoutClientInput!]
}

input AccountClientUpdateWithWhereUniqueWithoutAccountInput {
  data: AccountClientUpdateWithoutAccountInput!
  where: AccountClientWhereUniqueInput!
}

input AccountClientUpdateWithWhereUniqueWithoutClientInput {
  data: AccountClientUpdateWithoutClientInput!
  where: AccountClientWhereUniqueInput!
}

input AccountClientUpdateWithoutAccountInput {
  client: ClientUpdateOneRequiredWithoutAccountsVisibleInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountClientUpdateWithoutClientInput {
  account: AccountUpdateOneRequiredWithoutClientsVisibleInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountClientUpsertWithWhereUniqueWithoutAccountInput {
  create: AccountClientCreateWithoutAccountInput!
  update: AccountClientUpdateWithoutAccountInput!
  where: AccountClientWhereUniqueInput!
}

input AccountClientUpsertWithWhereUniqueWithoutClientInput {
  create: AccountClientCreateWithoutClientInput!
  update: AccountClientUpdateWithoutClientInput!
  where: AccountClientWhereUniqueInput!
}

input AccountClientWhereInput {
  AND: [AccountClientWhereInput!]
  NOT: [AccountClientWhereInput!]
  OR: [AccountClientWhereInput!]
  account: AccountWhereInput
  accountId: IntFilter
  client: ClientWhereInput
  clientId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  updatedAt: DateTimeFilter
}

input AccountClientWhereUniqueInput {
  acc_cli: AccountClientAcc_cliCompoundUniqueInput
  id: Int
}

input AccountCreateInput {
  categoriesVisible: AccountCategoryCreateNestedManyWithoutAccountInput
  client: ClientCreateNestedOneWithoutAccountInput
  clientsVisible: AccountClientCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  name: String!
  owner: UserCreateNestedOneWithoutAccountsInput!
  permissions: PermissionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
}

input AccountCreateManyOwnerInput {
  clientId: Int
  createdAt: DateTime
  id: Int
  name: String!
  updatedAt: DateTime
}

input AccountCreateManyOwnerInputEnvelope {
  data: [AccountCreateManyOwnerInput!]
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutOwnerInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutOwnerInput!]
  create: [AccountCreateWithoutOwnerInput!]
  createMany: AccountCreateManyOwnerInputEnvelope
}

input AccountCreateNestedOneWithoutCategoriesVisibleInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutCategoriesVisibleInput
  create: AccountCreateWithoutCategoriesVisibleInput
}

input AccountCreateNestedOneWithoutClientInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutClientInput
  create: AccountCreateWithoutClientInput
}

input AccountCreateNestedOneWithoutClientsVisibleInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutClientsVisibleInput
  create: AccountCreateWithoutClientsVisibleInput
}

input AccountCreateNestedOneWithoutPermissionsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutPermissionsInput
  create: AccountCreateWithoutPermissionsInput
}

input AccountCreateOrConnectWithoutCategoriesVisibleInput {
  create: AccountCreateWithoutCategoriesVisibleInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutClientInput {
  create: AccountCreateWithoutClientInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutClientsVisibleInput {
  create: AccountCreateWithoutClientsVisibleInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutOwnerInput {
  create: AccountCreateWithoutOwnerInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateOrConnectWithoutPermissionsInput {
  create: AccountCreateWithoutPermissionsInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutCategoriesVisibleInput {
  client: ClientCreateNestedOneWithoutAccountInput
  clientsVisible: AccountClientCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  name: String!
  owner: UserCreateNestedOneWithoutAccountsInput!
  permissions: PermissionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
}

input AccountCreateWithoutClientInput {
  categoriesVisible: AccountCategoryCreateNestedManyWithoutAccountInput
  clientsVisible: AccountClientCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  name: String!
  owner: UserCreateNestedOneWithoutAccountsInput!
  permissions: PermissionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
}

input AccountCreateWithoutClientsVisibleInput {
  categoriesVisible: AccountCategoryCreateNestedManyWithoutAccountInput
  client: ClientCreateNestedOneWithoutAccountInput
  createdAt: DateTime
  name: String!
  owner: UserCreateNestedOneWithoutAccountsInput!
  permissions: PermissionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
}

input AccountCreateWithoutOwnerInput {
  categoriesVisible: AccountCategoryCreateNestedManyWithoutAccountInput
  client: ClientCreateNestedOneWithoutAccountInput
  clientsVisible: AccountClientCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  name: String!
  permissions: PermissionCreateNestedManyWithoutAccountInput
  updatedAt: DateTime
}

input AccountCreateWithoutPermissionsInput {
  categoriesVisible: AccountCategoryCreateNestedManyWithoutAccountInput
  client: ClientCreateNestedOneWithoutAccountInput
  clientsVisible: AccountClientCreateNestedManyWithoutAccountInput
  createdAt: DateTime
  name: String!
  owner: UserCreateNestedOneWithoutAccountsInput!
  updatedAt: DateTime
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

input AccountOrderByRelationAggregateInput {
  count: SortOrder!
}

input AccountOrderByWithRelationInput {
  categoriesVisible: AccountCategoryOrderByRelationAggregateInput
  client: ClientOrderByWithRelationInput
  clientId: SortOrder
  clientsVisible: AccountClientOrderByRelationAggregateInput
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  owner: UserOrderByWithRelationInput
  permissions: PermissionOrderByRelationAggregateInput
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  clientId: IntNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input AccountUpdateInput {
  categoriesVisible: AccountCategoryUpdateManyWithoutAccountInput
  client: ClientUpdateOneWithoutAccountInput
  clientsVisible: AccountClientUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutAccountsInput
  permissions: PermissionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutOwnerInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutOwnerInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutOwnerInput!]
  create: [AccountCreateWithoutOwnerInput!]
  createMany: AccountCreateManyOwnerInputEnvelope
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutOwnerInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutOwnerInput!]
}

input AccountUpdateOneRequiredWithoutCategoriesVisibleInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutCategoriesVisibleInput
  create: AccountCreateWithoutCategoriesVisibleInput
  update: AccountUpdateWithoutCategoriesVisibleInput
  upsert: AccountUpsertWithoutCategoriesVisibleInput
}

input AccountUpdateOneRequiredWithoutClientsVisibleInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutClientsVisibleInput
  create: AccountCreateWithoutClientsVisibleInput
  update: AccountUpdateWithoutClientsVisibleInput
  upsert: AccountUpsertWithoutClientsVisibleInput
}

input AccountUpdateOneRequiredWithoutPermissionsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutPermissionsInput
  create: AccountCreateWithoutPermissionsInput
  update: AccountUpdateWithoutPermissionsInput
  upsert: AccountUpsertWithoutPermissionsInput
}

input AccountUpdateOneWithoutClientInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutClientInput
  create: AccountCreateWithoutClientInput
  delete: Boolean
  disconnect: Boolean
  update: AccountUpdateWithoutClientInput
  upsert: AccountUpsertWithoutClientInput
}

input AccountUpdateWithWhereUniqueWithoutOwnerInput {
  data: AccountUpdateWithoutOwnerInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutCategoriesVisibleInput {
  client: ClientUpdateOneWithoutAccountInput
  clientsVisible: AccountClientUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutAccountsInput
  permissions: PermissionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateWithoutClientInput {
  categoriesVisible: AccountCategoryUpdateManyWithoutAccountInput
  clientsVisible: AccountClientUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutAccountsInput
  permissions: PermissionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateWithoutClientsVisibleInput {
  categoriesVisible: AccountCategoryUpdateManyWithoutAccountInput
  client: ClientUpdateOneWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutAccountsInput
  permissions: PermissionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateWithoutOwnerInput {
  categoriesVisible: AccountCategoryUpdateManyWithoutAccountInput
  client: ClientUpdateOneWithoutAccountInput
  clientsVisible: AccountClientUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  permissions: PermissionUpdateManyWithoutAccountInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateWithoutPermissionsInput {
  categoriesVisible: AccountCategoryUpdateManyWithoutAccountInput
  client: ClientUpdateOneWithoutAccountInput
  clientsVisible: AccountClientUpdateManyWithoutAccountInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  owner: UserUpdateOneRequiredWithoutAccountsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutOwnerInput {
  create: AccountCreateWithoutOwnerInput!
  update: AccountUpdateWithoutOwnerInput!
  where: AccountWhereUniqueInput!
}

input AccountUpsertWithoutCategoriesVisibleInput {
  create: AccountCreateWithoutCategoriesVisibleInput!
  update: AccountUpdateWithoutCategoriesVisibleInput!
}

input AccountUpsertWithoutClientInput {
  create: AccountCreateWithoutClientInput!
  update: AccountUpdateWithoutClientInput!
}

input AccountUpsertWithoutClientsVisibleInput {
  create: AccountCreateWithoutClientsVisibleInput!
  update: AccountUpdateWithoutClientsVisibleInput!
}

input AccountUpsertWithoutPermissionsInput {
  create: AccountCreateWithoutPermissionsInput!
  update: AccountUpdateWithoutPermissionsInput!
}

input AccountUser_accountCompoundUniqueInput {
  name: String!
  userId: Int!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  categoriesVisible: AccountCategoryListRelationFilter
  client: ClientWhereInput
  clientId: IntNullableFilter
  clientsVisible: AccountClientListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  owner: UserWhereInput
  permissions: PermissionListRelationFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input AccountWhereUniqueInput {
  id: Int
  user_account: AccountUser_accountCompoundUniqueInput
}

type Category {
  id: Int!
  name: String!
}

input CategoryCreateInput {
  accountsVisible: AccountCategoryCreateNestedManyWithoutCategoryInput
  categoryType: CategoryType!
  createdAt: DateTime
  name: String!
  tx: TxCreateNestedManyWithoutCategoryInput
  updatedAt: DateTime
}

input CategoryCreateNestedOneWithoutAccountsVisibleInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutAccountsVisibleInput
  create: CategoryCreateWithoutAccountsVisibleInput
}

input CategoryCreateNestedOneWithoutTxInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutTxInput
  create: CategoryCreateWithoutTxInput
}

input CategoryCreateOrConnectWithoutAccountsVisibleInput {
  create: CategoryCreateWithoutAccountsVisibleInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateOrConnectWithoutTxInput {
  create: CategoryCreateWithoutTxInput!
  where: CategoryWhereUniqueInput!
}

input CategoryCreateWithoutAccountsVisibleInput {
  categoryType: CategoryType!
  createdAt: DateTime
  name: String!
  tx: TxCreateNestedManyWithoutCategoryInput
  updatedAt: DateTime
}

input CategoryCreateWithoutTxInput {
  accountsVisible: AccountCategoryCreateNestedManyWithoutCategoryInput
  categoryType: CategoryType!
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

input CategoryOrderByWithRelationInput {
  accountsVisible: AccountCategoryOrderByRelationAggregateInput
  categoryType: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  tx: TxOrderByRelationAggregateInput
  updatedAt: SortOrder
}

enum CategoryType {
  EXPENSE
  INCOME
  TRANSFER
}

input CategoryUpdateInput {
  accountsVisible: AccountCategoryUpdateManyWithoutCategoryInput
  categoryType: EnumCategoryTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  tx: TxUpdateManyWithoutCategoryInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateOneRequiredWithoutAccountsVisibleInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutAccountsVisibleInput
  create: CategoryCreateWithoutAccountsVisibleInput
  update: CategoryUpdateWithoutAccountsVisibleInput
  upsert: CategoryUpsertWithoutAccountsVisibleInput
}

input CategoryUpdateOneWithoutTxInput {
  connect: CategoryWhereUniqueInput
  connectOrCreate: CategoryCreateOrConnectWithoutTxInput
  create: CategoryCreateWithoutTxInput
  delete: Boolean
  disconnect: Boolean
  update: CategoryUpdateWithoutTxInput
  upsert: CategoryUpsertWithoutTxInput
}

input CategoryUpdateWithoutAccountsVisibleInput {
  categoryType: EnumCategoryTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  tx: TxUpdateManyWithoutCategoryInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateWithoutTxInput {
  accountsVisible: AccountCategoryUpdateManyWithoutCategoryInput
  categoryType: EnumCategoryTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpsertWithoutAccountsVisibleInput {
  create: CategoryCreateWithoutAccountsVisibleInput!
  update: CategoryUpdateWithoutAccountsVisibleInput!
}

input CategoryUpsertWithoutTxInput {
  create: CategoryCreateWithoutTxInput!
  update: CategoryUpdateWithoutTxInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  accountsVisible: AccountCategoryListRelationFilter
  categoryType: EnumCategoryTypeFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  tx: TxListRelationFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  id: Int
}

type Client {
  account: Account
  asPayee(after: TxWhereUniqueInput, before: TxWhereUniqueInput, first: Int, last: Int): [Tx!]!
  asPayer(after: TxWhereUniqueInput, before: TxWhereUniqueInput, first: Int, last: Int): [Tx!]!
  id: Int!
  name: String!
  txes: [Tx]
}

input ClientCreateInput {
  account: AccountCreateNestedOneWithoutClientInput
  accountsVisible: AccountClientCreateNestedManyWithoutClientInput
  asPayee: TxCreateNestedManyWithoutPayeeInput
  asPayer: TxCreateNestedManyWithoutPayerInput
  clientType: ClientType!
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

input ClientCreateNestedOneWithoutAccountInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutAccountInput
  create: ClientCreateWithoutAccountInput
}

input ClientCreateNestedOneWithoutAccountsVisibleInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutAccountsVisibleInput
  create: ClientCreateWithoutAccountsVisibleInput
}

input ClientCreateNestedOneWithoutAsPayeeInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutAsPayeeInput
  create: ClientCreateWithoutAsPayeeInput
}

input ClientCreateNestedOneWithoutAsPayerInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutAsPayerInput
  create: ClientCreateWithoutAsPayerInput
}

input ClientCreateOrConnectWithoutAccountInput {
  create: ClientCreateWithoutAccountInput!
  where: ClientWhereUniqueInput!
}

input ClientCreateOrConnectWithoutAccountsVisibleInput {
  create: ClientCreateWithoutAccountsVisibleInput!
  where: ClientWhereUniqueInput!
}

input ClientCreateOrConnectWithoutAsPayeeInput {
  create: ClientCreateWithoutAsPayeeInput!
  where: ClientWhereUniqueInput!
}

input ClientCreateOrConnectWithoutAsPayerInput {
  create: ClientCreateWithoutAsPayerInput!
  where: ClientWhereUniqueInput!
}

input ClientCreateWithoutAccountInput {
  accountsVisible: AccountClientCreateNestedManyWithoutClientInput
  asPayee: TxCreateNestedManyWithoutPayeeInput
  asPayer: TxCreateNestedManyWithoutPayerInput
  clientType: ClientType!
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

input ClientCreateWithoutAccountsVisibleInput {
  account: AccountCreateNestedOneWithoutClientInput
  asPayee: TxCreateNestedManyWithoutPayeeInput
  asPayer: TxCreateNestedManyWithoutPayerInput
  clientType: ClientType!
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

input ClientCreateWithoutAsPayeeInput {
  account: AccountCreateNestedOneWithoutClientInput
  accountsVisible: AccountClientCreateNestedManyWithoutClientInput
  asPayer: TxCreateNestedManyWithoutPayerInput
  clientType: ClientType!
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

input ClientCreateWithoutAsPayerInput {
  account: AccountCreateNestedOneWithoutClientInput
  accountsVisible: AccountClientCreateNestedManyWithoutClientInput
  asPayee: TxCreateNestedManyWithoutPayeeInput
  clientType: ClientType!
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

input ClientOrderByWithRelationInput {
  account: AccountOrderByWithRelationInput
  accountsVisible: AccountClientOrderByRelationAggregateInput
  asPayee: TxOrderByRelationAggregateInput
  asPayer: TxOrderByRelationAggregateInput
  clientType: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

enum ClientType {
  ACCOUNT
  CUSTOMER
  VENDOR
  WORKER
}

input ClientUpdateInput {
  account: AccountUpdateOneWithoutClientInput
  accountsVisible: AccountClientUpdateManyWithoutClientInput
  asPayee: TxUpdateManyWithoutPayeeInput
  asPayer: TxUpdateManyWithoutPayerInput
  clientType: EnumClientTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClientUpdateOneRequiredWithoutAccountsVisibleInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutAccountsVisibleInput
  create: ClientCreateWithoutAccountsVisibleInput
  update: ClientUpdateWithoutAccountsVisibleInput
  upsert: ClientUpsertWithoutAccountsVisibleInput
}

input ClientUpdateOneRequiredWithoutAsPayeeInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutAsPayeeInput
  create: ClientCreateWithoutAsPayeeInput
  update: ClientUpdateWithoutAsPayeeInput
  upsert: ClientUpsertWithoutAsPayeeInput
}

input ClientUpdateOneRequiredWithoutAsPayerInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutAsPayerInput
  create: ClientCreateWithoutAsPayerInput
  update: ClientUpdateWithoutAsPayerInput
  upsert: ClientUpsertWithoutAsPayerInput
}

input ClientUpdateOneWithoutAccountInput {
  connect: ClientWhereUniqueInput
  connectOrCreate: ClientCreateOrConnectWithoutAccountInput
  create: ClientCreateWithoutAccountInput
  delete: Boolean
  disconnect: Boolean
  update: ClientUpdateWithoutAccountInput
  upsert: ClientUpsertWithoutAccountInput
}

input ClientUpdateWithoutAccountInput {
  accountsVisible: AccountClientUpdateManyWithoutClientInput
  asPayee: TxUpdateManyWithoutPayeeInput
  asPayer: TxUpdateManyWithoutPayerInput
  clientType: EnumClientTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClientUpdateWithoutAccountsVisibleInput {
  account: AccountUpdateOneWithoutClientInput
  asPayee: TxUpdateManyWithoutPayeeInput
  asPayer: TxUpdateManyWithoutPayerInput
  clientType: EnumClientTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClientUpdateWithoutAsPayeeInput {
  account: AccountUpdateOneWithoutClientInput
  accountsVisible: AccountClientUpdateManyWithoutClientInput
  asPayer: TxUpdateManyWithoutPayerInput
  clientType: EnumClientTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClientUpdateWithoutAsPayerInput {
  account: AccountUpdateOneWithoutClientInput
  accountsVisible: AccountClientUpdateManyWithoutClientInput
  asPayee: TxUpdateManyWithoutPayeeInput
  clientType: EnumClientTypeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ClientUpsertWithoutAccountInput {
  create: ClientCreateWithoutAccountInput!
  update: ClientUpdateWithoutAccountInput!
}

input ClientUpsertWithoutAccountsVisibleInput {
  create: ClientCreateWithoutAccountsVisibleInput!
  update: ClientUpdateWithoutAccountsVisibleInput!
}

input ClientUpsertWithoutAsPayeeInput {
  create: ClientCreateWithoutAsPayeeInput!
  update: ClientUpdateWithoutAsPayeeInput!
}

input ClientUpsertWithoutAsPayerInput {
  create: ClientCreateWithoutAsPayerInput!
  update: ClientUpdateWithoutAsPayerInput!
}

input ClientWhereInput {
  AND: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  account: AccountWhereInput
  accountsVisible: AccountClientListRelationFilter
  asPayee: TxListRelationFilter
  asPayer: TxListRelationFilter
  clientType: EnumClientTypeFilter
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input ClientWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumCategoryTypeFieldUpdateOperationsInput {
  set: CategoryType
}

input EnumCategoryTypeFilter {
  equals: CategoryType
  in: [CategoryType!]
  not: NestedEnumCategoryTypeFilter
  notIn: [CategoryType!]
}

input EnumClientTypeFieldUpdateOperationsInput {
  set: ClientType
}

input EnumClientTypeFilter {
  equals: ClientType
  in: [ClientType!]
  not: NestedEnumClientTypeFilter
  notIn: [ClientType!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumUserStatusFieldUpdateOperationsInput {
  set: UserStatus
}

input EnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusFilter
  notIn: [UserStatus!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createOneAccount(data: AccountCreateInput!): Account!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneClient(data: ClientCreateInput!): Client!
  createOnePermission(data: PermissionCreateInput!): Permission!
  createOneTx(data: TxCreateInput!): Tx!
  createOneUser(data: UserCreateInput!): User!
  deleteOnePermission(where: PermissionWhereUniqueInput!): Permission
  updateOneAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneClient(data: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client
  updateOnePermission(data: PermissionUpdateInput!, where: PermissionWhereUniqueInput!): Permission
  updateOneTx(data: TxUpdateInput!, where: TxWhereUniqueInput!): Tx
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumCategoryTypeFilter {
  equals: CategoryType
  in: [CategoryType!]
  not: NestedEnumCategoryTypeFilter
  notIn: [CategoryType!]
}

input NestedEnumClientTypeFilter {
  equals: ClientType
  in: [ClientType!]
  not: NestedEnumClientTypeFilter
  notIn: [ClientType!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  not: NestedEnumUserStatusFilter
  notIn: [UserStatus!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Permission {
  account: Account!
  accountId: Int!
  createdAt: DateTime!
  id: Int!
  role: Role!
  updatedAt: DateTime!
  user: User!
  userId: Int!
}

input PermissionCreateInput {
  account: AccountCreateNestedOneWithoutPermissionsInput!
  createdAt: DateTime
  role: Role!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPermissionsInput!
}

input PermissionCreateManyAccountInput {
  createdAt: DateTime
  id: Int
  role: Role!
  updatedAt: DateTime
  userId: Int!
}

input PermissionCreateManyAccountInputEnvelope {
  data: [PermissionCreateManyAccountInput!]
  skipDuplicates: Boolean
}

input PermissionCreateManyUserInput {
  accountId: Int!
  createdAt: DateTime
  id: Int
  role: Role!
  updatedAt: DateTime
}

input PermissionCreateManyUserInputEnvelope {
  data: [PermissionCreateManyUserInput!]
  skipDuplicates: Boolean
}

input PermissionCreateNestedManyWithoutAccountInput {
  connect: [PermissionWhereUniqueInput!]
  connectOrCreate: [PermissionCreateOrConnectWithoutAccountInput!]
  create: [PermissionCreateWithoutAccountInput!]
  createMany: PermissionCreateManyAccountInputEnvelope
}

input PermissionCreateNestedManyWithoutUserInput {
  connect: [PermissionWhereUniqueInput!]
  connectOrCreate: [PermissionCreateOrConnectWithoutUserInput!]
  create: [PermissionCreateWithoutUserInput!]
  createMany: PermissionCreateManyUserInputEnvelope
}

input PermissionCreateOrConnectWithoutAccountInput {
  create: PermissionCreateWithoutAccountInput!
  where: PermissionWhereUniqueInput!
}

input PermissionCreateOrConnectWithoutUserInput {
  create: PermissionCreateWithoutUserInput!
  where: PermissionWhereUniqueInput!
}

input PermissionCreateWithoutAccountInput {
  createdAt: DateTime
  role: Role!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutPermissionsInput!
}

input PermissionCreateWithoutUserInput {
  account: AccountCreateNestedOneWithoutPermissionsInput!
  createdAt: DateTime
  role: Role!
  updatedAt: DateTime
}

input PermissionListRelationFilter {
  every: PermissionWhereInput
  none: PermissionWhereInput
  some: PermissionWhereInput
}

input PermissionOrderByRelationAggregateInput {
  count: SortOrder!
}

input PermissionScalarWhereInput {
  AND: [PermissionScalarWhereInput!]
  NOT: [PermissionScalarWhereInput!]
  OR: [PermissionScalarWhereInput!]
  accountId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  userId: IntFilter
}

input PermissionUpdateInput {
  account: AccountUpdateOneRequiredWithoutPermissionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPermissionsInput
}

input PermissionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PermissionUpdateManyWithWhereWithoutAccountInput {
  data: PermissionUpdateManyMutationInput!
  where: PermissionScalarWhereInput!
}

input PermissionUpdateManyWithWhereWithoutUserInput {
  data: PermissionUpdateManyMutationInput!
  where: PermissionScalarWhereInput!
}

input PermissionUpdateManyWithoutAccountInput {
  connect: [PermissionWhereUniqueInput!]
  connectOrCreate: [PermissionCreateOrConnectWithoutAccountInput!]
  create: [PermissionCreateWithoutAccountInput!]
  createMany: PermissionCreateManyAccountInputEnvelope
  delete: [PermissionWhereUniqueInput!]
  deleteMany: [PermissionScalarWhereInput!]
  disconnect: [PermissionWhereUniqueInput!]
  set: [PermissionWhereUniqueInput!]
  update: [PermissionUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [PermissionUpdateManyWithWhereWithoutAccountInput!]
  upsert: [PermissionUpsertWithWhereUniqueWithoutAccountInput!]
}

input PermissionUpdateManyWithoutUserInput {
  connect: [PermissionWhereUniqueInput!]
  connectOrCreate: [PermissionCreateOrConnectWithoutUserInput!]
  create: [PermissionCreateWithoutUserInput!]
  createMany: PermissionCreateManyUserInputEnvelope
  delete: [PermissionWhereUniqueInput!]
  deleteMany: [PermissionScalarWhereInput!]
  disconnect: [PermissionWhereUniqueInput!]
  set: [PermissionWhereUniqueInput!]
  update: [PermissionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PermissionUpdateManyWithWhereWithoutUserInput!]
  upsert: [PermissionUpsertWithWhereUniqueWithoutUserInput!]
}

input PermissionUpdateWithWhereUniqueWithoutAccountInput {
  data: PermissionUpdateWithoutAccountInput!
  where: PermissionWhereUniqueInput!
}

input PermissionUpdateWithWhereUniqueWithoutUserInput {
  data: PermissionUpdateWithoutUserInput!
  where: PermissionWhereUniqueInput!
}

input PermissionUpdateWithoutAccountInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutPermissionsInput
}

input PermissionUpdateWithoutUserInput {
  account: AccountUpdateOneRequiredWithoutPermissionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PermissionUpsertWithWhereUniqueWithoutAccountInput {
  create: PermissionCreateWithoutAccountInput!
  update: PermissionUpdateWithoutAccountInput!
  where: PermissionWhereUniqueInput!
}

input PermissionUpsertWithWhereUniqueWithoutUserInput {
  create: PermissionCreateWithoutUserInput!
  update: PermissionUpdateWithoutUserInput!
  where: PermissionWhereUniqueInput!
}

input PermissionUser_accCompoundUniqueInput {
  accountId: Int!
  userId: Int!
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  NOT: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  account: AccountWhereInput
  accountId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  role: EnumRoleFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: IntFilter
}

input PermissionWhereUniqueInput {
  id: Int
  user_acc: PermissionUser_accCompoundUniqueInput
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(after: AccountWhereUniqueInput, before: AccountWhereUniqueInput, first: Int, last: Int, orderBy: [AccountOrderByWithRelationInput!], where: AccountWhereInput): [Account!]!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int, orderBy: [CategoryOrderByWithRelationInput!], where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  client(where: ClientWhereUniqueInput!): Client
  clients(after: ClientWhereUniqueInput, before: ClientWhereUniqueInput, first: Int, last: Int, orderBy: [ClientOrderByWithRelationInput!], where: ClientWhereInput): [Client!]!
  tx(where: TxWhereUniqueInput!): Tx
  txes(after: TxWhereUniqueInput, before: TxWhereUniqueInput, first: Int, last: Int, orderBy: [TxOrderByWithRelationInput!], where: TxWhereInput): [Tx!]!
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: [UserOrderByWithRelationInput!], where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  EDITOR
  VIEWER
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Tx {
  amount: Int!
  category: Category
  createdBy: User
  date: DateTime
  id: Int!
  payee: Client!
  payer: Client!
}

input TxCreateInput {
  amount: Int!
  category: CategoryCreateNestedOneWithoutTxInput
  createdAt: DateTime
  createdBy: UserCreateNestedOneWithoutCreatedTxInput
  date: DateTime
  payee: ClientCreateNestedOneWithoutAsPayeeInput!
  payer: ClientCreateNestedOneWithoutAsPayerInput!
  updatedAt: DateTime
}

input TxCreateManyCategoryInput {
  amount: Int!
  createdAt: DateTime
  date: DateTime
  id: Int
  payeeId: Int!
  payerId: Int!
  updatedAt: DateTime
  userId: Int
}

input TxCreateManyCategoryInputEnvelope {
  data: [TxCreateManyCategoryInput!]
  skipDuplicates: Boolean
}

input TxCreateManyCreatedByInput {
  amount: Int!
  categoryId: Int
  createdAt: DateTime
  date: DateTime
  id: Int
  payeeId: Int!
  payerId: Int!
  updatedAt: DateTime
}

input TxCreateManyCreatedByInputEnvelope {
  data: [TxCreateManyCreatedByInput!]
  skipDuplicates: Boolean
}

input TxCreateManyPayeeInput {
  amount: Int!
  categoryId: Int
  createdAt: DateTime
  date: DateTime
  id: Int
  payerId: Int!
  updatedAt: DateTime
  userId: Int
}

input TxCreateManyPayeeInputEnvelope {
  data: [TxCreateManyPayeeInput!]
  skipDuplicates: Boolean
}

input TxCreateManyPayerInput {
  amount: Int!
  categoryId: Int
  createdAt: DateTime
  date: DateTime
  id: Int
  payeeId: Int!
  updatedAt: DateTime
  userId: Int
}

input TxCreateManyPayerInputEnvelope {
  data: [TxCreateManyPayerInput!]
  skipDuplicates: Boolean
}

input TxCreateNestedManyWithoutCategoryInput {
  connect: [TxWhereUniqueInput!]
  connectOrCreate: [TxCreateOrConnectWithoutCategoryInput!]
  create: [TxCreateWithoutCategoryInput!]
  createMany: TxCreateManyCategoryInputEnvelope
}

input TxCreateNestedManyWithoutCreatedByInput {
  connect: [TxWhereUniqueInput!]
  connectOrCreate: [TxCreateOrConnectWithoutCreatedByInput!]
  create: [TxCreateWithoutCreatedByInput!]
  createMany: TxCreateManyCreatedByInputEnvelope
}

input TxCreateNestedManyWithoutPayeeInput {
  connect: [TxWhereUniqueInput!]
  connectOrCreate: [TxCreateOrConnectWithoutPayeeInput!]
  create: [TxCreateWithoutPayeeInput!]
  createMany: TxCreateManyPayeeInputEnvelope
}

input TxCreateNestedManyWithoutPayerInput {
  connect: [TxWhereUniqueInput!]
  connectOrCreate: [TxCreateOrConnectWithoutPayerInput!]
  create: [TxCreateWithoutPayerInput!]
  createMany: TxCreateManyPayerInputEnvelope
}

input TxCreateOrConnectWithoutCategoryInput {
  create: TxCreateWithoutCategoryInput!
  where: TxWhereUniqueInput!
}

input TxCreateOrConnectWithoutCreatedByInput {
  create: TxCreateWithoutCreatedByInput!
  where: TxWhereUniqueInput!
}

input TxCreateOrConnectWithoutPayeeInput {
  create: TxCreateWithoutPayeeInput!
  where: TxWhereUniqueInput!
}

input TxCreateOrConnectWithoutPayerInput {
  create: TxCreateWithoutPayerInput!
  where: TxWhereUniqueInput!
}

input TxCreateWithoutCategoryInput {
  amount: Int!
  createdAt: DateTime
  createdBy: UserCreateNestedOneWithoutCreatedTxInput
  date: DateTime
  payee: ClientCreateNestedOneWithoutAsPayeeInput!
  payer: ClientCreateNestedOneWithoutAsPayerInput!
  updatedAt: DateTime
}

input TxCreateWithoutCreatedByInput {
  amount: Int!
  category: CategoryCreateNestedOneWithoutTxInput
  createdAt: DateTime
  date: DateTime
  payee: ClientCreateNestedOneWithoutAsPayeeInput!
  payer: ClientCreateNestedOneWithoutAsPayerInput!
  updatedAt: DateTime
}

input TxCreateWithoutPayeeInput {
  amount: Int!
  category: CategoryCreateNestedOneWithoutTxInput
  createdAt: DateTime
  createdBy: UserCreateNestedOneWithoutCreatedTxInput
  date: DateTime
  payer: ClientCreateNestedOneWithoutAsPayerInput!
  updatedAt: DateTime
}

input TxCreateWithoutPayerInput {
  amount: Int!
  category: CategoryCreateNestedOneWithoutTxInput
  createdAt: DateTime
  createdBy: UserCreateNestedOneWithoutCreatedTxInput
  date: DateTime
  payee: ClientCreateNestedOneWithoutAsPayeeInput!
  updatedAt: DateTime
}

input TxListRelationFilter {
  every: TxWhereInput
  none: TxWhereInput
  some: TxWhereInput
}

input TxOrderByRelationAggregateInput {
  count: SortOrder!
}

input TxOrderByWithRelationInput {
  amount: SortOrder
  category: CategoryOrderByWithRelationInput
  categoryId: SortOrder
  createdAt: SortOrder
  createdBy: UserOrderByWithRelationInput
  date: SortOrder
  id: SortOrder
  payee: ClientOrderByWithRelationInput
  payeeId: SortOrder
  payer: ClientOrderByWithRelationInput
  payerId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input TxScalarWhereInput {
  AND: [TxScalarWhereInput!]
  NOT: [TxScalarWhereInput!]
  OR: [TxScalarWhereInput!]
  amount: IntFilter
  categoryId: IntNullableFilter
  createdAt: DateTimeFilter
  date: DateTimeNullableFilter
  id: IntFilter
  payeeId: IntFilter
  payerId: IntFilter
  updatedAt: DateTimeFilter
  userId: IntNullableFilter
}

input TxUpdateInput {
  amount: IntFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutTxInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutCreatedTxInput
  date: NullableDateTimeFieldUpdateOperationsInput
  payee: ClientUpdateOneRequiredWithoutAsPayeeInput
  payer: ClientUpdateOneRequiredWithoutAsPayerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TxUpdateManyMutationInput {
  amount: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TxUpdateManyWithWhereWithoutCategoryInput {
  data: TxUpdateManyMutationInput!
  where: TxScalarWhereInput!
}

input TxUpdateManyWithWhereWithoutCreatedByInput {
  data: TxUpdateManyMutationInput!
  where: TxScalarWhereInput!
}

input TxUpdateManyWithWhereWithoutPayeeInput {
  data: TxUpdateManyMutationInput!
  where: TxScalarWhereInput!
}

input TxUpdateManyWithWhereWithoutPayerInput {
  data: TxUpdateManyMutationInput!
  where: TxScalarWhereInput!
}

input TxUpdateManyWithoutCategoryInput {
  connect: [TxWhereUniqueInput!]
  connectOrCreate: [TxCreateOrConnectWithoutCategoryInput!]
  create: [TxCreateWithoutCategoryInput!]
  createMany: TxCreateManyCategoryInputEnvelope
  delete: [TxWhereUniqueInput!]
  deleteMany: [TxScalarWhereInput!]
  disconnect: [TxWhereUniqueInput!]
  set: [TxWhereUniqueInput!]
  update: [TxUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [TxUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [TxUpsertWithWhereUniqueWithoutCategoryInput!]
}

input TxUpdateManyWithoutCreatedByInput {
  connect: [TxWhereUniqueInput!]
  connectOrCreate: [TxCreateOrConnectWithoutCreatedByInput!]
  create: [TxCreateWithoutCreatedByInput!]
  createMany: TxCreateManyCreatedByInputEnvelope
  delete: [TxWhereUniqueInput!]
  deleteMany: [TxScalarWhereInput!]
  disconnect: [TxWhereUniqueInput!]
  set: [TxWhereUniqueInput!]
  update: [TxUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [TxUpdateManyWithWhereWithoutCreatedByInput!]
  upsert: [TxUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input TxUpdateManyWithoutPayeeInput {
  connect: [TxWhereUniqueInput!]
  connectOrCreate: [TxCreateOrConnectWithoutPayeeInput!]
  create: [TxCreateWithoutPayeeInput!]
  createMany: TxCreateManyPayeeInputEnvelope
  delete: [TxWhereUniqueInput!]
  deleteMany: [TxScalarWhereInput!]
  disconnect: [TxWhereUniqueInput!]
  set: [TxWhereUniqueInput!]
  update: [TxUpdateWithWhereUniqueWithoutPayeeInput!]
  updateMany: [TxUpdateManyWithWhereWithoutPayeeInput!]
  upsert: [TxUpsertWithWhereUniqueWithoutPayeeInput!]
}

input TxUpdateManyWithoutPayerInput {
  connect: [TxWhereUniqueInput!]
  connectOrCreate: [TxCreateOrConnectWithoutPayerInput!]
  create: [TxCreateWithoutPayerInput!]
  createMany: TxCreateManyPayerInputEnvelope
  delete: [TxWhereUniqueInput!]
  deleteMany: [TxScalarWhereInput!]
  disconnect: [TxWhereUniqueInput!]
  set: [TxWhereUniqueInput!]
  update: [TxUpdateWithWhereUniqueWithoutPayerInput!]
  updateMany: [TxUpdateManyWithWhereWithoutPayerInput!]
  upsert: [TxUpsertWithWhereUniqueWithoutPayerInput!]
}

input TxUpdateWithWhereUniqueWithoutCategoryInput {
  data: TxUpdateWithoutCategoryInput!
  where: TxWhereUniqueInput!
}

input TxUpdateWithWhereUniqueWithoutCreatedByInput {
  data: TxUpdateWithoutCreatedByInput!
  where: TxWhereUniqueInput!
}

input TxUpdateWithWhereUniqueWithoutPayeeInput {
  data: TxUpdateWithoutPayeeInput!
  where: TxWhereUniqueInput!
}

input TxUpdateWithWhereUniqueWithoutPayerInput {
  data: TxUpdateWithoutPayerInput!
  where: TxWhereUniqueInput!
}

input TxUpdateWithoutCategoryInput {
  amount: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutCreatedTxInput
  date: NullableDateTimeFieldUpdateOperationsInput
  payee: ClientUpdateOneRequiredWithoutAsPayeeInput
  payer: ClientUpdateOneRequiredWithoutAsPayerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TxUpdateWithoutCreatedByInput {
  amount: IntFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutTxInput
  createdAt: DateTimeFieldUpdateOperationsInput
  date: NullableDateTimeFieldUpdateOperationsInput
  payee: ClientUpdateOneRequiredWithoutAsPayeeInput
  payer: ClientUpdateOneRequiredWithoutAsPayerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TxUpdateWithoutPayeeInput {
  amount: IntFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutTxInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutCreatedTxInput
  date: NullableDateTimeFieldUpdateOperationsInput
  payer: ClientUpdateOneRequiredWithoutAsPayerInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TxUpdateWithoutPayerInput {
  amount: IntFieldUpdateOperationsInput
  category: CategoryUpdateOneWithoutTxInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneWithoutCreatedTxInput
  date: NullableDateTimeFieldUpdateOperationsInput
  payee: ClientUpdateOneRequiredWithoutAsPayeeInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TxUpsertWithWhereUniqueWithoutCategoryInput {
  create: TxCreateWithoutCategoryInput!
  update: TxUpdateWithoutCategoryInput!
  where: TxWhereUniqueInput!
}

input TxUpsertWithWhereUniqueWithoutCreatedByInput {
  create: TxCreateWithoutCreatedByInput!
  update: TxUpdateWithoutCreatedByInput!
  where: TxWhereUniqueInput!
}

input TxUpsertWithWhereUniqueWithoutPayeeInput {
  create: TxCreateWithoutPayeeInput!
  update: TxUpdateWithoutPayeeInput!
  where: TxWhereUniqueInput!
}

input TxUpsertWithWhereUniqueWithoutPayerInput {
  create: TxCreateWithoutPayerInput!
  update: TxUpdateWithoutPayerInput!
  where: TxWhereUniqueInput!
}

input TxWhereInput {
  AND: [TxWhereInput!]
  NOT: [TxWhereInput!]
  OR: [TxWhereInput!]
  amount: IntFilter
  category: CategoryWhereInput
  categoryId: IntNullableFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  date: DateTimeNullableFilter
  id: IntFilter
  payee: ClientWhereInput
  payeeId: IntFilter
  payer: ClientWhereInput
  payerId: IntFilter
  updatedAt: DateTimeFilter
  userId: IntNullableFilter
}

input TxWhereUniqueInput {
  id: Int
}

type User {
  email: String
  id: Int!
  username: String
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  createdTx: TxCreateNestedManyWithoutCreatedByInput
  email: String
  emailVerified: DateTime
  hash: String
  image: String
  permissions: PermissionCreateNestedManyWithoutUserInput
  salt: String
  status: UserStatus
  updatedAt: DateTime
  username: String
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutCreatedTxInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCreatedTxInput
  create: UserCreateWithoutCreatedTxInput
}

input UserCreateNestedOneWithoutPermissionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPermissionsInput
  create: UserCreateWithoutPermissionsInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCreatedTxInput {
  create: UserCreateWithoutCreatedTxInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPermissionsInput {
  create: UserCreateWithoutPermissionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  createdAt: DateTime
  createdTx: TxCreateNestedManyWithoutCreatedByInput
  email: String
  emailVerified: DateTime
  hash: String
  image: String
  permissions: PermissionCreateNestedManyWithoutUserInput
  salt: String
  status: UserStatus
  updatedAt: DateTime
  username: String
}

input UserCreateWithoutCreatedTxInput {
  accounts: AccountCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  hash: String
  image: String
  permissions: PermissionCreateNestedManyWithoutUserInput
  salt: String
  status: UserStatus
  updatedAt: DateTime
  username: String
}

input UserCreateWithoutPermissionsInput {
  accounts: AccountCreateNestedManyWithoutOwnerInput
  createdAt: DateTime
  createdTx: TxCreateNestedManyWithoutCreatedByInput
  email: String
  emailVerified: DateTime
  hash: String
  image: String
  salt: String
  status: UserStatus
  updatedAt: DateTime
  username: String
}

input UserOrderByWithRelationInput {
  accounts: AccountOrderByRelationAggregateInput
  createdAt: SortOrder
  createdTx: TxOrderByRelationAggregateInput
  email: SortOrder
  emailVerified: SortOrder
  hash: SortOrder
  id: SortOrder
  image: SortOrder
  permissions: PermissionOrderByRelationAggregateInput
  salt: SortOrder
  status: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

enum UserStatus {
  ACCEPTED
  DECLINED
  ONHOLD
  PENDING
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdTx: TxUpdateManyWithoutCreatedByInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  hash: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  permissions: PermissionUpdateManyWithoutUserInput
  salt: NullableStringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
  update: UserUpdateWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutPermissionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPermissionsInput
  create: UserCreateWithoutPermissionsInput
  update: UserUpdateWithoutPermissionsInput
  upsert: UserUpsertWithoutPermissionsInput
}

input UserUpdateOneWithoutCreatedTxInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCreatedTxInput
  create: UserCreateWithoutCreatedTxInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCreatedTxInput
  upsert: UserUpsertWithoutCreatedTxInput
}

input UserUpdateWithoutAccountsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdTx: TxUpdateManyWithoutCreatedByInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  hash: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  permissions: PermissionUpdateManyWithoutUserInput
  salt: NullableStringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutCreatedTxInput {
  accounts: AccountUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  hash: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  permissions: PermissionUpdateManyWithoutUserInput
  salt: NullableStringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpdateWithoutPermissionsInput {
  accounts: AccountUpdateManyWithoutOwnerInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdTx: TxUpdateManyWithoutCreatedByInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  hash: NullableStringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  salt: NullableStringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  username: NullableStringFieldUpdateOperationsInput
}

input UserUpsertWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  update: UserUpdateWithoutAccountsInput!
}

input UserUpsertWithoutCreatedTxInput {
  create: UserCreateWithoutCreatedTxInput!
  update: UserUpdateWithoutCreatedTxInput!
}

input UserUpsertWithoutPermissionsInput {
  create: UserCreateWithoutPermissionsInput!
  update: UserUpdateWithoutPermissionsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  createdAt: DateTimeFilter
  createdTx: TxListRelationFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  hash: StringNullableFilter
  id: IntFilter
  image: StringNullableFilter
  permissions: PermissionListRelationFilter
  salt: StringNullableFilter
  status: EnumUserStatusFilter
  updatedAt: DateTimeFilter
  username: StringNullableFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
  username: String
}
